;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Critical
; arg:1 - scanner to use
; returns: pass or fail
;
; Open the scanner and wait for the session to go critical.  This test
; show that the scanner does its best to alert an application when it
; has to abruptly end a session.
;



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Display the banner...
;
echo.yellow
echo.yellow
echo.yellow
echo.yellow '********************************************************************************'
echo.yellow 'Critical v1.0 10-Sep-2017'
set criticalgetsessionresult 'pass'
set criticalwaitforeventsresult 'skip'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Instructions to the user...
;
echo.yellow
echo.yellow 'This test checks that the scanner returns a "critical" event when the scanner'
echo.yellow 'is turned off in the middle of an active session.'
echo.yellow
echo.yellow 'When prompted, please turn the scanner off.  If TWAIN Bridge is being used'
echo.yellow 'with a TWAIN driver, do not turn the scanner off.  Instead, please press the'
echo.yellow '"Stop" button on the TWAIN Bridge console.'
echo.yellow
echo.yellow 'After the test is complete there will be a prompt to turn the scanner back on.'
echo.yellow 'If TWAIN Bridge is being used, press the "Start" button on the TWAIN Bridge'
echo.yellow 'console.'
echo.yellow



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Pick a scanner...
;
select '${arg:1}'
if '${ret:}' != 'true' goto MAIN.FAIL



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Get the scanner info, including its x-privet-token...
;
echo 'CMD: infoex'
infoex
if '${rj:x-privet-token}' == '' goto MAIN.FAIL



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Create a new session...
;
echo 'CMD: createSession'
createSession
if '${rj:results.success}' != 'true' goto MAIN.FAIL
if '${rj:results.session.state}' != 'ready' goto MAIN.FAIL



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Wait for events, we're passing in the test we want to
; perform, and the variable we want to be set when it's
; complete.  We need two result variables, because we
; need to make sure the waitForSession content is correctly
; constructed...
;
echo 'CMD: waitForEvents'
waitForEvents 'test waitForEvents' 'critical' 'criticalwaitforeventsresult'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Prompt the user to turn the scanner off...
;
echo
echo 'Please turn the scanner off, enter "y" and press the Enter key when ready.'
input 'Is the scanner off? ' 'Y' 'A'
if '${ret:}' ~~ 'A' goto MAIN.FAIL



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Snooze until we get a critical event, if we don't see
; anything after one minute, declare the test a bust.
; We check every 5 seconds for 1 minute.
;
set tt 0
:MAIN.WAIT
	if '${get:tt}' > 60000 goto MAIN.WAITFAIL
	if '${get:criticalwaitforeventsresult}' == 'pass' goto MAIN.WAITDONE
	if '${get:criticalwaitforeventsresult}' == 'fail' goto MAIN.WAITDONE
	increment tt '${get:tt}' 5000
	sleep 5000
goto MAIN.WAIT



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; How did we do?
;
:MAIN.WAITDONE
if '${get:criticalwaitforeventsresult}' != 'pass' goto MAIN.FAIL
echopassfail 'Critical' 'pass'
log info '#Test result:                 pass'
echo
echo 'Please turn the scanner back on, enter "y" and press the Enter key when ready.'
input 'Is the scanner on? ' 'Y'
return 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; MAIN.FAIL
;
:MAIN.FAIL
closeSession
echopassfail 'Critical' 'fail (critical not seen)'
log info '#Test result:                 fail (critical not seen)'
return 'fail'
