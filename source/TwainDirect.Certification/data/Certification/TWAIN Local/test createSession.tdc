;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Test createSession v1.0 24-Jun-2017
; returns: pass or fail
;
; Exercise the createSession command.  We're going to do the following:
;
; - confirm that commands report invalidState when called before createSession
;
; - confirm that createSession succeeds, and contains all required properties
;
; - confirm that createSession reports busy now, and others report invalidState
;



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Display the banner...
;
echo
echo 'Test createSession v1.0 24-Jun-2017'
set createsessionresult 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Make sure that commands prior to a successful createSession return invalidSessionId.  We don't do
; waitForEvents here, because any complaint has to come back asynchronously.  invalidSessionId takes
; precedence over invalidState, because in order to figure out what state we're in, we have to know
; what session we belong to.
;
call CHECKINVALIDSESSIONID 'getSession'
call CHECKINVALIDSESSIONID 'sendTask' '{}'
call CHECKINVALIDSESSIONID 'startCapturing'
call CHECKINVALIDSESSIONID 'readImageBlockMetadata' '1' 'false'
call CHECKINVALIDSESSIONID 'readImageBlock' '1' 'false'
call CHECKINVALIDSESSIONID 'releaseImageBlocks' '1' '1'
call CHECKINVALIDSESSIONID 'stopCapturing'
call CHECKINVALIDSESSIONID 'closeSession'
call CHECKINVALIDSESSIONID 'invalidCommand'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Now do this test with waitForEvents
;
call WAITFOREVENTSCHECKINVALIDSESSIONID



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Call createSession, and check the return properties...
;
call CREATESESSION



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Check the codes, we're looking for commands that must return busy and invalidState
;
call CHECKCODE 'createSession' 'busy'
call CHECKCODE 'readImageBlockMetadata' 'invalidState' '1' 'false'
call CHECKCODE 'readImageBlock' 'invalidState' '1' 'false'
call CHECKCODE 'releaseImageBlocks' 'invalidState' '1' '1'
call CHECKCODE 'stopCapturing' 'invalidState'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Bye-bye...
;
echopassfail 'SUMMARY' '${get:createsessionresult}'
return '${get:createsessionresult}'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; CHECKINVALIDSESSIONID
; arg:1 - command to run
; returns pass or fail
;
:CHECKINVALIDSESSIONID
;
; Send the command...
twainlocalsession 'create'
'${arg:1}' '${arg:2}' '${arg:3}' '${arg:4}' '${arg:5}'
twainlocalsession 'destroy'
;
; Check the result...
if '${rj:results.success}' != 'false' goto CHECKINVALIDSESSIONID.FAILSTATUS
if '${rj:results.code}' != 'invalidSessionId' goto CHECKINVALIDSESSIONID.FAILCODE
;
; We're good...
echopassfail 'check invalidSessionId: ${arg:1}' 'pass'
return 'pass'
;
:CHECKINVALIDSESSIONID.FAILSTATUS
echopassfail 'check invalidSessionId: ${arg:1}' 'fail (success not false)'
set createsessionresult 'fail'
return 'fail'
;
:CHECKINVALIDSESSIONID.FAILCODE
echopassfail 'check invalidSessionId: ${arg:1}' 'fail (code not invalidSessionId)'
set createsessionresult 'fail'
return 'fail'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; WAITFOREVENTSCHECKINVALIDSESSIONID
; returns pass or fail
;
:WAITFOREVENTSCHECKINVALIDSESSIONID
;
; Send the command...
set waitforeventsresult 'fail'
twainlocalsession 'create'
waitForEvents 'test waitForEvents' 'checkinvalidsessionid' 'waitforeventsresult' '3000'
sleep 5000
twainlocalsession 'destroy'
if '${get:waitforeventsresult}' != 'pass' goto WAITFOREVENTSCHECKINVALIDSESSIONID.FAIL
; We're good...
echopassfail 'check invalidSessionId: waitForEvents' 'pass'
return 'pass'
;
; We're not so good...
:WAITFOREVENTSCHECKINVALIDSESSIONID.FAIL
echopassfail 'check invalidSessionId: waitForEvents' 'fail'
set createsessionresult 'fail'
return 'fail'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; CREATESESSION
; returns pass or fail
;
:CREATESESSION
;
; Send the command...
createSession
;
; Check the mandatory properties...
call CHECK 'kind'
call CHECK 'commandId'
call CHECK 'method' '==' 'createSession'
call CHECK 'results'
call CHECK 'results.success' '==' 'true'
call CHECK 'results.session'
call CHECK 'results.session.sessionId' '!=' ''
call CHECK 'results.session.revision' '==' '1'
call CHECK 'results.session.state' '==' 'ready'
if '${get:createsessionresult}' != 'pass' goto CREATESESSION.FAIL
;
; We're good...
echopassfail 'createSession call' 'pass'
return 'pass'
;
:CREATESESSION.FAIL
set createsessionresult 'fail'
echopassfail 'createSession call' 'fail'
return 'fail'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; CHECK
; arg1 - property
; arg2 - if-statement operator (optional)
; arg3 - value to check for if arg2 is specified
; returns pass or fail
;
:CHECK
;
; Make sure the property exists...
if '${rjx:${arg:1}}' == '(null)' goto CHECK.MISSING
;
; If we have no operator, we're done...
if '${arg:2}' == '' goto CHECK.PASS
;
; Do the if-statement...
if '${rj:${arg:1}}' '${arg:2}' '${arg:3}' goto CHECK.PASS
;
; The if-statement failed...
echopassfail 'check ${arg:1}' 'fail (if '<${rj:${arg:1}}>' '${arg:2}' '<${arg:3}>')'
set createsessionresult 'fail'
return 'fail'
;
; The property is missing...
:CHECK.MISSING
echopassfail 'check ${arg:1}' 'fail (${arg1:} missing)'
set createsessionresult 'fail'
return 'fail'
;
; We're good...
:CHECK.PASS
echopassfail 'check ${arg:1}' 'pass'
return 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; CHECKCODE
; arg:1 - command to run
; arg:2 - code to check for
; arg:3 - argument for command, if needed
; arg:4 - argument for command, if needed
; arg:5 - argument for command, if needed
; returns pass or fail
;
:CHECKCODE
;
; Send the command...
'${arg:1}' '${arg:3}' '${arg:4}' '${arg:5}'
;
; Check the result...
if '${rj:results.success}' != 'false' goto CHECKCODE.FAILSTATUS
if '${rj:results.code}' != '${arg:2}' goto CHECKCODE.FAILCODE
;
; We're good...
echopassfail 'check ${arg:2}: ${arg:1}' 'pass'
return 'pass'
;
:CHECKCODE.FAILSTATUS
echopassfail 'check ${arg:2}: ${arg:1}' 'fail (success not false)'
set createsessionresult 'fail'
return 'fail'
;
:CHECKCODE.FAILCODE
echopassfail 'check ${arg:2}: ${arg:1}' 'fail (code not ${arg:2})'
set createsessionresult 'fail'
return 'fail'
