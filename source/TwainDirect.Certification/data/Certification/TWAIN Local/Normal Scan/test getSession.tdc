;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Test getSession
; Exercise the getSession command.  We're going to do the following:
; - confirm that getSession succeeds, and contains all required properties
;
; Arguments
; arg:1 - state to test for
; arg:2 - [OUT] set tag to true, if done
; arg:3 - [OUT] set tag to first imaage block, if we have one
;
; Locals
; getsessionresult - result of the test
;
; returns: pass or fail
;



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Display the banner...
;
echo
echo 'Test getSession v1.0 17-Jul-2017'
set getsessionresult 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Call getSession, and check the return properties...
;
call GETSESSION '${arg:1}' '${arg:2}' '${arg:3}'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Bye-bye...
;
echopassfail 'SUMMARY' '${get:getsessionresult}'
return '${get:getsessionresult}'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; GETSESSION
; arg:1 - state to test for
; returns pass or fail
;
:GETSESSION
;
; Send the command...
getSession
;
; Check the headers...
run 'function CheckHeader' 'getsessionresult' 'Content-Type' ~contains 'application/json' 'charset=utf-8'
run 'function CheckHeader' 'getsessionresult' 'Content-Length' == '${rdata:#}'
;
; Check the mandatory properties...
run 'function CheckJsonProperty' 'getsessionresult' 'kind' == 'twainlocalscanner'
run 'function CheckJsonProperty' 'getsessionresult' 'commandId'
run 'function CheckJsonProperty' 'getsessionresult' 'method' == 'getSession'
run 'function CheckJsonProperty' 'getsessionresult' 'results'
run 'function CheckJsonProperty' 'getsessionresult' 'results.success' == 'true'
run 'function CheckJsonProperty' 'getsessionresult' 'results.session'
run 'function CheckJsonProperty' 'getsessionresult' 'results.session.sessionId' != ''
run 'function CheckJsonProperty' 'getsessionresult' 'results.session.revision' != ''
run 'function CheckJsonProperty' 'getsessionresult' 'results.session.state' == '${arg:1}'
if '${get:getsessionresult}' != 'pass' goto GETSESSION.FAIL
;
; We're good, check if we need to output values...
call RETURNVALUES '${arg:2}' '${arg:3}'
echopassfail 'getSession call' 'pass'
return 'pass'
;
; No joy...
:GETSESSION.FAIL
set getsessionresult 'fail'
echopassfail 'getSession call' 'fail'
return 'fail'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; RETURNVALUES
; arg1 - [OUT] set tag to true, if done
; arg2 - [OUT] set tag to first imaage block, if we have one
; return pass
;
:RETURNVALUES
;
; If we don't have arg:1, we're done...
if '${arg:1}' == '' goto RETURNVALUES.DONE
;
; We're done if our state isn't capturing, or if the
; flag tells us we've drained the scanner...
set '${arg:1}' true
if '${rj:results.session.state}' != 'capturing' goto RETURNVALUES.DONE
if '${rj:results.session.imageBlocksDrained}' == 'true' goto RETURNVALUES.DONE
set '${arg:1}' false
;
; If we don't have arg:2, we're done...
if '${arg:2}' == '' goto RETURNVALUES.DONE
;
; Get the first image block, if there is one...
set '${arg:2}' '${rj:results.session.imageBlocks[0]}'
;
; bye-bye...
:RETURNVALUES.DONE
return 'pass'
