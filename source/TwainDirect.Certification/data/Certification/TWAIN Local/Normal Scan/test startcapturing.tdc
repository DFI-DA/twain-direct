;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Test startCapturing v1.0 24-Jun-2017
; returns: pass or fail
;
; Exercise the startCapturing command.  We're going to do the following:
;
; - confirm that startCapturing, and contains all required properties
;
; - confirm that startCapturing reports invalidState now
;



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Display the banner...
;
echo
echo 'Test startCapturing v1.0 24-Jun-2017'
set startcapturingresult 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Check the codes, we're looking for commands that must return busy and invalidState
;
call CHECKCODE 'createSession' 'busy'
call CHECKCODE 'readImageBlockMetadata' 'invalidState' '1' 'false'
call CHECKCODE 'readImageBlock' 'invalidState' '1' 'false'
call CHECKCODE 'releaseImageBlocks' 'invalidState' '1' '1'
call CHECKCODE 'stopCapturing' 'invalidState'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Call startCapturing, and check the return properties...
;
call STARTCAPTURING



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Check the codes, we're looking for commands that must return busy and invalidState
;
call CHECKCODE 'createSession' 'busy'
call CHECKCODE 'startCapturing' 'invalidState'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Bye-bye...
;
echopassfail 'SUMMARY' '${get:startcapturingresult}'
return '${get:startcapturingresult}'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; STARTCAPTURING
; returns pass or fail
;
:STARTCAPTURING
;
; Send the command...
startCapturing
;
; Check the mandatory properties...
call CHECK 'kind'
call CHECK 'commandId'
call CHECK 'method' '==' 'startCapturing'
call CHECK 'results'
call CHECK 'results.success' '==' 'true'
call CHECK 'results.session'
call CHECK 'results.session.sessionId' '!=' ''
call CHECK 'results.session.revision' '!=' ''
call CHECK 'results.session.state' '==' 'capturing'
if '${get:startcapturingresult}' != 'pass' goto STARTCAPTURING.FAIL
;
; We're good...
echopassfail 'startCapturing call' 'pass'
return 'pass'
;
:STARTCAPTURING.FAIL
echopassfail 'startCapturing call' 'fail'
return 'fail'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; CHECK
; arg1 - property
; arg2 - if-statement operator (optional)
; arg3 - value to check for if arg2 is specified
; returns pass or fail
;
:CHECK
;
; Make sure the property exists...
if '${rjx:${arg:1}}' == '(null)' goto CHECK.MISSING
;
; If we have no operator, we're done...
if '${arg:2}' == '' goto CHECK.PASS
;
; Do the if-statement...
if '${rj:${arg:1}}' '${arg:2}' '${arg:3}' goto CHECK.PASS
;
; The if-statement failed...
echopassfail 'check ${arg:1}' 'fail (if '<${rj:${arg:1}}>' '${arg:2}' '<${arg:3}>')'
set startcapturingresult 'fail'
return 'fail'
;
; The property is missing...
:CHECK.MISSING
echopassfail 'check ${arg:1}' 'fail (${arg:1} missing)'
set startcapturingresult 'fail'
return 'fail'
;
; We're good...
:CHECK.PASS
echopassfail 'check ${arg:1}' 'pass'
return 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; CHECKCODE
; arg:1 - command to run
; arg:2 - code to check for
; arg:3 - argument for command, if needed
; arg:4 - argument for command, if needed
; arg:5 - argument for command, if needed
; returns pass or fail
;
:CHECKCODE
;
; Send the command...
'${arg:1}' '${arg:3}' '${arg:4}' '${arg:5}'
;
; Check the result...
if '${rj:results.success}' != 'false' goto CHECKCODE.FAILSTATUS
if '${rj:results.code}' != '${arg:2}' goto CHECKCODE.FAILCODE
;
; We're good...
echopassfail 'check ${arg:2}: ${arg:1}' 'pass'
return 'pass'
;
:CHECKCODE.FAILSTATUS
echopassfail 'check ${arg:2}: ${arg:1}' 'fail (success not false)'
set startcapturingresult 'fail'
return 'fail'
;
:CHECKCODE.FAILCODE
echopassfail 'check ${arg:2}: ${arg:1}' 'fail (code not ${arg:2})'
set startcapturingresult 'fail'
return 'fail'
